name: Build_oneplus_sm8750
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝请选择要编译的机型："
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'

      keep_original_settings:
        description: "📝保持原内核名称及构建时间(不懂请保持默认)"
        required: false
        default: true
        type: boolean

      custom_kernel_suffix:
        description: "✏️ 自定义内核名称- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''
      
      custom_kernel_time:
        description: "⏰ 自定义构建时间- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''

      enable_feature_z:
        description: "添加风驰驱动"
        required: false
        default: true
        type: boolean

      enable_feature_x:
        description: "生成无KPM的AK3 - 取消则只有有KPM的AK3"
        required: false
        default: true
        type: boolean

      ksu_custom_suffix:
        description: "✏️ SukiSU版本自定义内容"
        required: false
        default: "酷安Fate007"


jobs:
  build:
    name: Build_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: ⚙️ Set REPO_MANIFEST (设置对应机型配置文件)
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo 'DEFAULT_SUFFIX=-android15-8-g4dc61d72e02f-abogki415959920-4k' >> $GITHUB_ENV
              ;;
            realme_GT7pro_Speed)
              echo 'DEFAULT_SUFFIX=-android15-8-g013ec21bba94-abogki383916444-4k' >> $GITHUB_ENV
              ;;
            realme_GT7)
              echo 'DEFAULT_SUFFIX=-android15-8-g06c41a4a6e98-abogki395793266-4k' >> $GITHUB_ENV
              ;;
            realme_GT7pro)
              echo 'DEFAULT_SUFFIX=-android15-8-gc6f5283046c6-ab12364222-4k' >> $GITHUB_ENV
              ;;
            oneplus_13t)
              echo 'DEFAULT_SUFFIX=-android15-8-gd43086512890-abogki423825152-4k' >> $GITHUB_ENV
              ;;
            oneplus_pad_2_pro)
              echo 'DEFAULT_SUFFIX=-android15-8-g7b1f455c7143-ab13591283-4k' >> $GITHUB_ENV
              ;;
            oneplus_13 | oneplus_ace5_ultra)
              echo 'DEFAULT_SUFFIX=-android15-8-g29d86c5fc9dd-abogki428889875-4k' >> $GITHUB_ENV
              ;;
          esac
          # 修复自定义构建时间变量未定义问题
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.custom_kernel_suffix }}" ]; then
            CUSTOM_TIME="${{ github.event.inputs.custom_kernel_time }}"
            echo "使用自定义构建时间: $CUSTOM_TIME"
            echo "KERNEL_TIME=$CUSTOM_TIME" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.REPO_MANIFEST }}" in
              oneplus_ace5_pro)
                echo 'KERNEL_TIME=Mon May 12 09:09:59 UTC 2025' >> $GITHUB_ENV
                ;;
              realme_GT7pro_Speed)
                echo 'KERNEL_TIME=Tue Dec 17 23:36:49 UTC 2024' >> $GITHUB_ENV
                ;;
              realme_GT7)
                echo 'KERNEL_TIME=Mon Jan 20 03:24:58 UTC 2025' >> $GITHUB_ENV
                ;;
              realme_GT7pro)
                echo 'KERNEL_TIME=Fri Sep 13 02:08:57 UTC 2024' >> $GITHUB_ENV
                ;;
              oneplus_13t)
                echo 'KERNEL_TIME=Tue Jun 10 12:12:23 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_pad_2_pro)
                echo 'KERNEL_TIME=Tue Jun  3 03:22:33 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_13 | oneplus_ace5_ultra)
                echo 'KERNEL_TIME=Tue Jul  1 19:48:18 UTC 2025' >> $GITHUB_ENV
                ;;
            esac
          fi
          # 传递SukiSU自定义后缀到环境变量
          echo "KSU_CUSTOM_SUFFIX=${{ github.event.inputs.ksu_custom_suffix }}" >> $GITHUB_ENV
          # 新增：SUSFS仓库地址（与原二进制工具一致）
          echo "SUSFS_REPO=https://gitlab.com/simonpunk/susfs4ksu.git" >> $GITHUB_ENV
          echo "SUKIPATCH_REPO=https://github.com/SukiSU-Ultra/SukiSU_patch.git" >> $GITHUB_ENV
          
      - name: ⚙️ Set device-specific CCACHE_DIR (设置对应机型Cceche路径)
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: 📦 Configure Git (设置下载账户)
        run: |
          git config --global user.name "FateYin1"
          git config --global user.email "1244243922@qq.com"

      - name: 🛠 Configure APT caching (配置APT缓存)
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: 🛠 Cache APT packages (缓存APT包)
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 📦 Install dependencies (安装依赖)
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          # 新增openssl依赖（二进制工具需要）
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 p7zip-full git curl ccache libelf-dev \
            build-essential libelf-dev flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip openssl
          
          echo "✅ 依赖安装完成"

      # 新增：配置二进制工具
      - name: 🔧 配置二进制工具
        run: |
          BINARY_DIR="protected"
          BINARY_FILE="$BINARY_DIR/main.bin"
          
          if [ ! -d "$BINARY_DIR" ]; then mkdir -p "$BINARY_DIR"; fi
          if [ ! -f "$BINARY_FILE" ]; then
            echo "❌ 二进制文件 $BINARY_FILE 不存在"
            exit 1
          fi
          
          chmod +x "$BINARY_FILE"
          if "$BINARY_FILE" version_check; then
            echo "✅ 二进制工具验证通过"
          else
            echo "⚠️ 工具版本检查通过"
          fi
          echo "BINARY_TOOL=$(realpath "$BINARY_FILE")" >> $GITHUB_ENV

      - name: 📥 Restore ccache (载入机型缓存)
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ env.REPO_MANIFEST }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.REPO_MANIFEST }}-
            ccache-${{ runner.os }}-

      - name: 📥 Init ccache (初始化Cceche)
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "初始化 ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache 已初始化，跳过"
            fi
          else
            echo "未安装 ccache，跳过"
          fi

      - name: 📥 Install repo tool (下载repo工具)
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      # 替换：用二进制工具同步源码
      - name: 📥 Initialize repo and sync (同步内核源码)
        run: |
          echo "📥 调用二进制工具同步 ${{ env.DEVICES_NAME }} 源码"
          ${{ env.BINARY_TOOL }} sync_repo ${{ env.DEVICES_NAME }}
          
          if [ -d "kernel_workspace" ]; then
            rm kernel_workspace/kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
            rm kernel_workspace/kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          else
            echo "❌ 源码同步失败"
            exit 1
          fi

      # 替换：用二进制工具配置SukiSU
      - name: ⚙️ Set SukiSU Ultra (配置版本信息)
        run: |
          echo "🔧 调用二进制工具配置SukiSU（后缀：${{ env.KSU_CUSTOM_SUFFIX }}）"
          ${{ env.BINARY_TOOL }} setup_sukisu ${{ env.DEVICES_NAME }} "${{ env.KSU_CUSTOM_SUFFIX }}"
          
          cd kernel_workspace/kernel_platform/KernelSU
          KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/Makefile" | \
            grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
          if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
            KSU_API_VERSION="3.1.7"
          fi
          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV

          GIT_HASH=$(git rev-parse --short HEAD)
          VERSION_FULL="v$KSU_API_VERSION-${{ env.KSU_CUSTOM_SUFFIX }}[$GIT_HASH]"
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

          echo "::group::SukiSU版本预览"
          grep -A10 "REPO_OWNER" kernel/Makefile
          grep "KSU_VERSION_FULL" kernel/Makefile
          echo "::endgroup::"

      # 核心变更：移除二进制工具调用，改为工作流直接执行SUSFS配置
      - name: 🔧 Set up SUSFS (工作流明文配置，绕开二进制工具)
        run: |
          echo "🔧 工作流明文配置SUSFS"
          cd kernel_workspace || { echo "❌ 工作目录不存在"; exit 1; }

          # 1. 提取内核版本信息（与原二进制工具逻辑一致）
          KERNEL_VERSION=$(awk '/^VERSION =/ {v=$3} /^PATCHLEVEL =/ {p=$3} /^SUBLEVEL =/ {s=$3} END {print v"."p"."s}' ./kernel_platform/common/Makefile) || { echo "❌ 获取内核版本失败"; exit 1; }
          KANDROID_VERSION=$(grep -m1 '^BRANCH=' ./kernel_platform/common/build.config.constants ./kernel_platform/common/build.config.common 2>/dev/null | cut -d= -f2 | sed 's/^android//' | cut -d- -f1) || { echo "❌ 获取Android版本失败"; exit 1; }
          KERNEL_MAIN_VERSION=$(echo "$KERNEL_VERSION" | awk -F. '{print $1"."$2}') || { echo "❌ 获取内核主版本失败"; exit 1; }
          echo "内核版本: $KERNEL_VERSION，Android版本: $KANDROID_VERSION，主版本: $KERNEL_MAIN_VERSION"
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "KERNEL_MAIN_VERSION=$KERNEL_MAIN_VERSION" >> $GITHUB_ENV
          echo "KANDROID_VERSION=$KANDROID_VERSION" >> $GITHUB_ENV

          # 2. 生成分支名并检查（保留原重试逻辑，增加网络诊断）
          SUSFS_BRANCH="gki-android${KANDROID_VERSION}-${KERNEL_MAIN_VERSION}"
          echo "尝试分支: $SUSFS_BRANCH"

          # 增加3次重试+超时，确保Git命令稳定（工作流环境网络更可靠）
          for RETRY in {1..3}; do
            echo "⏳ 第 $RETRY 次检查分支 $SUSFS_BRANCH..."
            if git ls-remote --exit-code --timeout 10 "$SUSFS_REPO" "$SUSFS_BRANCH" >/dev/null 2>&1; then
              echo "✅ 分支 $SUSFS_BRANCH 存在，开始克隆..."
              break
            else
              echo "⚠️ 分支 $SUSFS_BRANCH 暂不可达，等待2秒后重试..."
              sleep 2
            fi
          done

          # 若3次重试后仍不存在，尝试主分支
          if ! git ls-remote --exit-code --timeout 10 "$SUSFS_REPO" "$SUSFS_BRANCH" >/dev/null 2>&1; then
            echo "⚠️ 分支 $SUSFS_BRANCH 不存在，尝试主分支 main..."
            SUSFS_BRANCH="main"
            if ! git ls-remote --exit-code --timeout 10 "$SUSFS_REPO" "$SUSFS_BRANCH" >/dev/null 2>&1; then
              echo "❌ 仓库 $SUSFS_REPO 中，$SUSFS_BRANCH 和 main 分支都不存在，请检查网络或仓库配置。"
              exit 1
            fi
          fi

          # 3. 克隆仓库（工作流环境执行，网络配置完整）
          git clone "$SUSFS_REPO" -b "$SUSFS_BRANCH" --depth=1 susfs4ksu || { echo "❌ 克隆SUSFS失败"; exit 1; }
          git clone "$SUKIPATCH_REPO" --depth=1 SukiSU_patch || { echo "❌ 克隆SukiSU_patch失败"; exit 1; }
          cd kernel_platform || { echo "❌ 进入内核目录失败"; exit 1; }

          # 4. 应用补丁（与原二进制工具逻辑完全一致）
          PATCH_FILE="50_add_susfs_in_gki-android${KANDROID_VERSION}-${KERNEL_MAIN_VERSION}.patch"
          if [ ! -f "../susfs4ksu/kernel_patches/$PATCH_FILE" ]; then
            PATCH_FILE=$(find ../susfs4ksu/kernel_patches -name "50_add_susfs_in_gki-*.patch" | head -n1)
            [ -z "$PATCH_FILE" ] && { echo "❌ 无SUSFS补丁"; exit 1; }
          fi
          cp "$PATCH_FILE" ./common/ || { echo "❌ 复制补丁失败"; exit 1; }
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ 2>/dev/null || echo "⚠️ 无FS补丁"

          cd ./common || { echo "❌ 进入common目录失败"; exit 1; }
          if [[ "$KERNEL_MAIN_VERSION" == "6.6" ]]; then
            TRUSTY_EXISTS=$(grep -q 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${REPO_MANIFEST}.xml" && echo "true" || echo "false")
            [ "$TRUSTY_EXISTS" = "false" ] && sed -i 's/-32,12 +32,38/-32,11 +32,37/g; /#include <trace\/hooks\/fs.h>/d' "$PATCH_FILE" || true
          fi
          patch -p1 < "$PATCH_FILE" 2>/dev/null || echo "⚠️ 补丁应用警告"
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./ 2>/dev/null && patch -p1 < syscall_hooks.patch 2>/dev/null || echo "⚠️ 钩子补丁警告"
          echo "✅ SUSFS配置完成"

      - name: 🔧 Cache HMBird patch (缓存开机补丁)
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1
            
      - name: 🔧 Apply HMBird GKI patch (应用单Boot补丁)
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          if [ ! -f "$PATCH_FILE" ]; then
            echo "下载HMBird补丁..."
            cp "${GITHUB_WORKSPACE}/hmbird_patch.c" "$PATCH_FILE"
          fi
          
          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c
          
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBird补丁应用完成"

      # 替换：用二进制工具设置编译配置
      - name: 🔧 Set gki_defconfig (设置编译配置)
        run: |
          echo "🔧 调用二进制工具设置编译配置"
          ${{ env.BINARY_TOOL }} set_defconfig ${{ env.DEVICES_NAME }}

      - name: 🔧 Set Kernel name (设置内核名称)
        env:
          KEEP_ORIGINAL: ${{ github.event.inputs.keep_original_settings }}
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "保持原设置: $KEEP_ORIGINAL"
          echo "自定义后缀: $CUSTOM_SUFFIX"
          echo "默认后缀: $DEFAULT_SUFFIX"
          
          if [ "$KEEP_ORIGINAL" = "false" ]; then
            if [ -n "$CUSTOM_SUFFIX" ]; then
              DEFAULT_SUFFIX="$CUSTOM_SUFFIX"
              echo "使用自定义内核名称: $DEFAULT_SUFFIX"
            else
              echo "使用机型默认内核名称: $DEFAULT_SUFFIX"
            fi
          else
            echo "保持原内核名称设置"
          fi
          ESCAPED_SUFFIX=$(printf '%s\n' "$DEFAULT_SUFFIX" | sed 's:[\/&]:\\&:g')
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          
      - name: 🔧 Add sched_ext (写入风驰补丁)
        if: ${{inputs.enable_feature_z }}
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/showdo/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched  
          
      - name: 🔨 Build Kernel (构建内核)
        run: |
          export PATH="/usr/lib/ccache:$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          export KBUILD_BUILD_TIMESTAMP="${KERNEL_TIME}"
          
          THREAD_COUNT=$(nproc --all)
          echo "============================================="
          echo "          开始内核编译流程                    "
          echo "          使用线程数: $THREAD_COUNT           "
          echo "============================================="
          
          cd kernel_workspace/kernel_platform/common
          make -j$THREAD_COUNT LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  gki_defconfig
          make -j$THREAD_COUNT LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  Image

      - name: 📦 Make AnyKernel3 (NoKPM)
        if: ${{inputs.enable_feature_x }}
        run: |
          git clone https://github.com/FateYin1/AnyKernel3.git --depth=1 AnyKernel3_NoKPM
          rm -rf ./AnyKernel3_NoKPM/.git
          rm -rf ./AnyKernel3_NoKPM/push.sh
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3_NoKPM/
      
      - name: 📤 Upload AnyKernel3 (上传NoKPM包)
        if: ${{inputs.enable_feature_x }}
        uses: actions/upload-artifact@v4
        with:
          name: AK3_NoKPM_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU
          path: ./AnyKernel3_NoKPM/*

      - name: 📦 Apply KPM Patch (应用KPM修补)
        run: |
         cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
         curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image
         
      - name: 📦 Make AnyKernel3 (KPM)
        run: |
         git clone https://github.com/FateYin1/AnyKernel3.git --depth=1      
         rm -rf ./AnyKernel3/.git
         rm -rf ./AnyKernel3/push.sh
         cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/

      - name: 📤 Upload AnyKernel3 (上传KPM包)
        uses: actions/upload-artifact@v4
        with:
         name: AK3_KPM_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU
         path: ./AnyKernel3/*
         
      - name: 📊 Post-build disk check (构建后空间检查)
        run: |
          echo "构建后磁盘空间："
          df -h
